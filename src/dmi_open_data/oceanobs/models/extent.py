# coding: utf-8

"""
    DMI Open Data API - Ocean observation

    <h2>Free access to the Danish Meteorological Institutes data.  <img style=\"float: right; max-width: 6%;\" src='https://www.dmi.dk/fileadmin/templates/img/logo.png'></img></h2>                    <p>The services provided by this API require authentication and an authentication key is mandatory.<br/>In order to retrieve data it is necessary to register as user. Read more here: <a style=\"text-decoration: none;\" href=\"https://opendatadocs.dmi.govcloud.dk/en/Authentication\">Authentication</a></p>                    <p><a style=\"text-decoration: none;\" href=\"https://opendatadocs.dmi.govcloud.dk/en/APIs/Oceanographic_Observation_API\">Information about the Oceanographic Observation service</a></p>                    <p>This service follows the standard for OGC API Features as described in <a href=\"https://docs.opengeospatial.org/is/17-069r3/17-069r3.html\">OGC API - Features - Part 1: Core</a></p>

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from dmi_open_data.oceanobs.models.spatial import Spatial
from dmi_open_data.oceanobs.models.temporal import Temporal
from typing import Optional, Set
from typing_extensions import Self

class Extent(BaseModel):
    """
    Extent
    """ # noqa: E501
    spatial: Optional[Spatial] = None
    temporal: Optional[Temporal] = None
    __properties: ClassVar[List[str]] = ["spatial", "temporal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Extent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of spatial
        if self.spatial:
            _dict['spatial'] = self.spatial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal
        if self.temporal:
            _dict['temporal'] = self.temporal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Extent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spatial": Spatial.from_dict(obj["spatial"]) if obj.get("spatial") is not None else None,
            "temporal": Temporal.from_dict(obj["temporal"]) if obj.get("temporal") is not None else None
        })
        return _obj


